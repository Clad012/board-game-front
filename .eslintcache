[{"C:\\Users\\Achraff\\projects\\board-game\\src\\index.tsx":"1","C:\\Users\\Achraff\\projects\\board-game\\src\\reportWebVitals.ts":"2","C:\\Users\\Achraff\\projects\\board-game\\src\\App.tsx":"3","C:\\Users\\Achraff\\projects\\board-game\\src\\views\\Game.tsx":"4","C:\\Users\\Achraff\\projects\\board-game\\src\\components\\Grid\\Grid.tsx":"5","C:\\Users\\Achraff\\projects\\board-game\\src\\views\\Main.tsx":"6","C:\\Users\\Achraff\\projects\\board-game\\src\\components\\layouts\\Navbar.tsx":"7","C:\\Users\\Achraff\\projects\\board-game\\src\\components\\layouts\\Container.tsx":"8","C:\\Users\\Achraff\\projects\\board-game\\src\\routes.tsx":"9","C:\\Users\\Achraff\\projects\\board-game\\src\\components\\Grid\\ActionBar\\ActionBar.tsx":"10","C:\\Users\\Achraff\\projects\\board-game\\src\\components\\Grid\\Node\\Node.tsx":"11","C:\\Users\\Achraff\\projects\\board-game\\src\\views\\Home.tsx":"12","C:\\Users\\Achraff\\projects\\board-game\\src\\components\\UI\\PlayMode.tsx":"13","C:\\Users\\Achraff\\projects\\board-game\\src\\components\\ballAnimation.js":"14"},{"size":500,"mtime":1607274983784,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":1607274983784,"results":"17","hashOfConfig":"16"},{"size":293,"mtime":1607637527179,"results":"18","hashOfConfig":"16"},{"size":346,"mtime":1607683098464,"results":"19","hashOfConfig":"16"},{"size":22377,"mtime":1608482906442,"results":"20","hashOfConfig":"16"},{"size":339,"mtime":1608481837930,"results":"21","hashOfConfig":"16"},{"size":1208,"mtime":1607636230846,"results":"22","hashOfConfig":"16"},{"size":255,"mtime":1608481869285,"results":"23","hashOfConfig":"16"},{"size":968,"mtime":1608469863624,"results":"24","hashOfConfig":"16"},{"size":1873,"mtime":1608483547088,"results":"25","hashOfConfig":"16"},{"size":3322,"mtime":1608407518040,"results":"26","hashOfConfig":"16"},{"size":1041,"mtime":1608481726441,"results":"27","hashOfConfig":"16"},{"size":589,"mtime":1608471445143,"results":"28","hashOfConfig":"16"},{"size":1229,"mtime":1608489411935,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"q1yiuq",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"C:\\Users\\Achraff\\projects\\board-game\\src\\index.tsx",[],["63","64"],"C:\\Users\\Achraff\\projects\\board-game\\src\\reportWebVitals.ts",[],"C:\\Users\\Achraff\\projects\\board-game\\src\\App.tsx",[],"C:\\Users\\Achraff\\projects\\board-game\\src\\views\\Game.tsx",[],"C:\\Users\\Achraff\\projects\\board-game\\src\\components\\Grid\\Grid.tsx",["65","66","67","68","69","70","71","72","73","74","75","76","77","78"],"import React, { useState, useEffect } from \"react\";\r\nimport ActionBar from \"./ActionBar/ActionBar\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport NodeComponent from \"./Node/Node\";\r\nimport io from \"socket.io-client\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\ninterface Node {\r\n  col: number;\r\n  row: number;\r\n  isWall: boolean;\r\n  recentlyBuilt: boolean;\r\n  isEndZone: boolean;\r\n  isPlayer1: boolean;\r\n  isPlayer2: boolean;\r\n  tile: boolean;\r\n  isTornadoX: boolean;\r\n  isTornadoY: boolean;\r\n  nextTornadoX: boolean;\r\n  nextTornadoY: boolean;\r\n  isBonus: boolean;\r\n}\r\n\r\ninterface NodeCoordinates {\r\n  row: number;\r\n  col: number;\r\n}\r\nconst playerID = uuidv4();\r\n\r\nexport default function Grid() {\r\n  const [socket, setSocket] = useState(\r\n    io.connect(\"http://localhost:5000/\", {\r\n      transports: [\"websocket\", \"polling\"],\r\n    })\r\n  );\r\n\r\n  const [grid, setGrid] = useState<Node[][]>([]);\r\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [isMyTurn, setIsMyTurn] = useState(false);\r\n  const [nbPlayer, setNbPlayer] = useState(0);\r\n  const [nbTurns, setNbTurns] = useState(0);\r\n  const [recentlyBuiltWalls, setRecentlyBuiltWalls] = useState<Node[]>([]);\r\n  const [gridGenerated, setGridGenerated] = useState(false);\r\n  const [actionsLeft, setActionsLeft] = useState(0);\r\n\r\n  const [\r\n    nextNodeCoordinates,\r\n    setNextTornadoCoordiantes,\r\n  ] = useState<NodeCoordinates>({ row: -1, col: -1 });\r\n\r\n  const [tornadoPlaced, setTornadoPlaced] = useState(false);\r\n  const [currentTornado, setCurrentTornado] = useState<NodeCoordinates>();\r\n\r\n  const [tornadoList, setTornadoList] = useState<NodeCoordinates[]>([]);\r\n  const [activeTornados, setActiveTornados] = useState<NodeCoordinates[]>([]);\r\n  const [activeBonus, setActiveBonus] = useState<NodeCoordinates[]>([]);\r\n  const [bonusCoordinates, setBonusCoordinates] = useState<NodeCoordinates>();\r\n\r\n  const player1X = 23;\r\n  const player1Y = 1;\r\n  const player2X = 1;\r\n  const player2Y = 23;\r\n\r\n  const [playerX, setPlayerX] = useState(player1X);\r\n  const [playerY, setPlayerY] = useState(player1Y);\r\n\r\n  const [opponentX, setOpponentX] = useState(player2X);\r\n  const [opponentY, setOpponentY] = useState(player2Y);\r\n\r\n  const [isPlayer1, setIsPlayer1] = useState(true);\r\n\r\n  const maxGridX = 25;\r\n  const maxGridY = 25;\r\n\r\n  useEffect(() => {\r\n    socket.emit(\r\n      \"leave-room\",\r\n      \"36d2f9e5-d94f-44f6-a23a-2ab5350b9ce722321\",\r\n      playerID\r\n    );\r\n    setTimeout(() => {\r\n      socket.emit(\r\n        \"join-room\",\r\n        \"36d2f9e5-d94f-44f6-a23a-2ab5350b9ce722321\",\r\n        playerID\r\n      );\r\n    }, 2000);\r\n\r\n    //on Player 1\r\n    socket.on(\"player-connected\", (userId: string) => {\r\n      setNbPlayer(nbPlayer + 1);\r\n      if (!gameStarted && isPlayer1) {\r\n        setIsPlayer1(true);\r\n\r\n        console.log(\"Player Joined: \" + userId);\r\n        socket.emit(\"game-ready\", playerID, !isPlayer1, nbPlayer);\r\n        generateMaze(getInitialGrid());\r\n        // setTimeout(() => {\r\n        //   setPlayerX(23);\r\n        //   setPlayerY(1);\r\n        //   setGameStarted(true);\r\n        //   handleTurn();\r\n        // }, 2000);\r\n      }\r\n    });\r\n\r\n    //On Player 2\r\n    socket.on(\r\n      \"game-ready\",\r\n      (userId: string, playerType: boolean, nbOfPlayers: number) => {\r\n        setNbPlayer(nbOfPlayers + 1);\r\n\r\n        console.log(playerType ? \"Player 1\" : \"Player 2\");\r\n        if (!gameStarted) {\r\n          console.log(\"Game is Ready\");\r\n          setIsPlayer1(false);\r\n          generateMaze(getInitialGrid());\r\n          // setTimeout(() => {\r\n          //   setPlayerX(1);\r\n          //   setPlayerY(23);\r\n          //   setGameStarted(true);\r\n          // }, 2000);\r\n        }\r\n      }\r\n    );\r\n\r\n    socket.on(\"turn-end\", (nextTornado: NodeCoordinates) => {\r\n      if (nextTornado && nextTornado.col !== -1) {\r\n        setCurrentTornado(nextTornado);\r\n      }\r\n      setTornadoPlaced(false);\r\n      handleTurn();\r\n      // let timeout = nbTurns === 0 ? 2000 : 20;\r\n      // setTimeout(() => {\r\n      //   handleTurn();\r\n      // }, timeout);\r\n    });\r\n\r\n    socket.on(\r\n      \"action-done\",\r\n      (newGrid: Node[][], otherPlayerX: number, otherPlayerY: number) => {\r\n        console.log({ otherPlayerX, otherPlayerY });\r\n        setOpponentX(otherPlayerX);\r\n        setOpponentY(otherPlayerY);\r\n        if (newGrid.length > 0) setGrid(newGrid);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  const getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < maxGridX; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < maxGridY; col++) {\r\n        currentRow.push(createNode(col, row));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  const createNode = (col: number, row: number) => {\r\n    return {\r\n      col,\r\n      row,\r\n      isWall: false,\r\n      recentlyBuilt: false,\r\n      isEndZone: false,\r\n      isPlayer1: false,\r\n      isPlayer2: false,\r\n      tile: false,\r\n      isTornadoX: false,\r\n      isTornadoY: false,\r\n      nextTornadoX: false,\r\n      nextTornadoY: false,\r\n      isBonus: false,\r\n    };\r\n  };\r\n  const toggleWall = (row: number, col: number) => {\r\n    if (grid[row][col].isPlayer1 || grid[row][col].isPlayer2) return;\r\n    const newGrid: Node[][] = grid.slice();\r\n    const node: Node = newGrid[row][col];\r\n    if (!node.recentlyBuilt || !node.isWall) {\r\n      newGrid[row][col].recentlyBuilt = !node.isWall;\r\n      newGrid[row][col].isWall = !node.isWall;\r\n      if (!node.isWall) newGrid[row][col].tile = !node.isWall;\r\n\r\n      if (newGrid[row][col].recentlyBuilt) {\r\n        var recentlyBuiltWallsArray: Node[] = recentlyBuiltWalls;\r\n        recentlyBuiltWallsArray.push(node);\r\n        setRecentlyBuiltWalls(recentlyBuiltWallsArray);\r\n        console.log(recentlyBuiltWalls);\r\n      }\r\n\r\n      setGrid(newGrid);\r\n    }\r\n    if (node.isWall) {\r\n      newGrid[row][col].tile = true;\r\n    }\r\n    handleEndTurn(playerX, playerY, actionsLeft - 1);\r\n    setActionsLeft(actionsLeft - 1);\r\n    return newGrid;\r\n  };\r\n\r\n  const clearRecentlyBuiltWalls = (newGrid: Node[][]) => {\r\n    console.log({ recentlyBuiltWalls });\r\n    console.log({ newGrid });\r\n    if (recentlyBuiltWalls.length > 0 && newGrid.length > 0) {\r\n      recentlyBuiltWalls.forEach((el: Node) => {\r\n        newGrid[el.row][el.col].recentlyBuilt = false;\r\n      });\r\n      setRecentlyBuiltWalls([]);\r\n      setGrid(newGrid);\r\n      socket.emit(\"action-done\", newGrid, playerX, playerY);\r\n    }\r\n  };\r\n  //Genrate the Maze\r\n  const generateMaze = (grid: Node[][]) => {\r\n    const newGrid: Node[][] = grid.slice();\r\n    let twoPercent = getPurcentage(maxGridX, 0.2);\r\n    // let fourPercent = getPurcentage(maxGridX, 0.4);\r\n    // let fivePercent = getPurcentage(maxGridX, 0.5);\r\n    let sixPercent = getPurcentage(maxGridX, 0.6);\r\n    let eightPercent = getPurcentage(maxGridX, 0.8);\r\n    let ninePercent = getPurcentage(maxGridX, 0.9);\r\n    let i: number, j: number;\r\n    for (i = 0; i < maxGridX; i++) {\r\n      for (j = 0; j < maxGridY; j++) {\r\n        if (\r\n          i === 0 ||\r\n          j === maxGridY - 1 ||\r\n          i === maxGridX - 1 ||\r\n          j === 0 ||\r\n          (i % 4 === 0 &&\r\n            i !== twoPercent &&\r\n            i !== 12 &&\r\n            i !== eightPercent &&\r\n            i !== sixPercent &&\r\n            (j < 4 || j > 8) &&\r\n            i !== maxGridX - 2) ||\r\n          (j % 4 === 0 &&\r\n            j !== 16 &&\r\n            j !== ninePercent &&\r\n            j !== eightPercent &&\r\n            j !== twoPercent &&\r\n            j !== maxGridY - 2) ||\r\n          (j === 18 && i > 8 && i < 16) ||\r\n          (i === 12 && j > 18 && i < 24) ||\r\n          (i === 6 && j > 4 && j < 8) ||\r\n          (i === 14 && j > 4 && j < 8) ||\r\n          (i === 20 && j > 12 && j < 24) ||\r\n          (j === 16 && i > 0 && i < 4) ||\r\n          (j === 19 && i > 4 && i < 8) ||\r\n          (j === 16 && i > 16 && i < 20) ||\r\n          (j === 20 && i > 20 && i < 24) ||\r\n          (j === 11 && i > 10 && i < 14) ||\r\n          (j === 13 && i > 10 && i < 14)\r\n        ) {\r\n          // animateToggleWall(grid[i][j], j);\r\n\r\n          if (newGrid[i] && newGrid[i][j]) {\r\n            (function (i: number, j: number) {\r\n              setTimeout(function () {\r\n                if (i === 12 && j === 12) newGrid[i][j].isWall = false;\r\n                else newGrid[i][j].isWall = true;\r\n                animateToggleWall(i, j);\r\n                if (i === maxGridX - 1 && j === maxGridY - 1) {\r\n                  setGridGenerated(true);\r\n                  setGrid(newGrid);\r\n                }\r\n              }, (i + j) * 90);\r\n            })(i, j);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    newGrid[player2X][player2Y].isPlayer2 = true;\r\n    newGrid[player1X][player1Y].isPlayer1 = true;\r\n    newGrid[12][12].isEndZone = true;\r\n    newGrid[12][12].isWall = false;\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isMyTurn) {\r\n      if (currentTornado) {\r\n        var tornados: NodeCoordinates[] = tornadoList.slice();\r\n        tornados.push(currentTornado);\r\n        setTornadoList(tornados);\r\n      }\r\n\r\n      clearRecentlyBuiltWalls(grid);\r\n      console.log({ tornadoList });\r\n\r\n      generateNextTornado();\r\n      generateTornado();\r\n      if (nbTurns % 3 == 0 || nbTurns == 1) generateBonus();\r\n\r\n      if (nbTurns % 4 == 0) clearBonus();\r\n\r\n      if (nbTurns > 0) {\r\n        clearTornado();\r\n      }\r\n      socket.emit(\"action-done\", grid, playerX, playerY);\r\n      console.log({ nbTurns });\r\n    }\r\n  }, [isMyTurn]);\r\n  useEffect(() => {\r\n    if (tornadoPlaced) {\r\n      let tornadosActive: NodeCoordinates[] = activeTornados.slice();\r\n      if (currentTornado) {\r\n        tornadosActive.push(currentTornado);\r\n        setActiveTornados(tornadosActive);\r\n      }\r\n    }\r\n  }, [tornadoPlaced]);\r\n\r\n  useEffect(() => {\r\n    if (gridGenerated) {\r\n      if (isPlayer1) {\r\n        setPlayerX(player1X);\r\n        setPlayerY(player1Y);\r\n        setOpponentX(player2X);\r\n        setOpponentY(player2Y);\r\n        setIsMyTurn(true);\r\n        handleTurn();\r\n      } else {\r\n        setPlayerX(player2X);\r\n        setPlayerY(player2Y);\r\n        setOpponentX(player1X);\r\n        setOpponentY(player1Y);\r\n        setIsMyTurn(false);\r\n      }\r\n      setGameStarted(true);\r\n    }\r\n  }, [gridGenerated]);\r\n\r\n  // const randomTornadoSpawnCoordinate = (min: number, max: number, iter: number) => {\r\n  //   let randomArray: Array<number> = [];\r\n  //   let i: number = 0;\r\n  //   for (i = 0; i < iter; i++) {\r\n  //     let randomNb = Math.trunc(Math.random() * (max - min) + min);\r\n  //     randomArray.push(randomNb);\r\n  //   }\r\n  //   return randomArray;\r\n  // };\r\n  const randomTornadoSpawnCoordinate = (\r\n    min: number,\r\n    max: number,\r\n    isX: boolean = true\r\n  ) => {\r\n    const chance: number = Math.random();\r\n    if (chance > 0.4 && nbTurns > 0)\r\n      if (isX) return opponentX;\r\n      else return opponentY;\r\n    return Math.trunc(Math.random() * (max - min) + min);\r\n  };\r\n\r\n  const randomBonusSpawnCoordinate = (min: number, max: number) => {\r\n    return Math.trunc(Math.random() * (max - min) + min);\r\n  };\r\n  const getPurcentage = (value: number, purcent: number) => {\r\n    return Math.trunc(value * purcent);\r\n  };\r\n  const animateToggleWall = (row: number, col: number) => {\r\n    if (`node-${row}-${col}` !== \"node-12-12\") {\r\n      let node = document.getElementById(`node-${row}-${col}`);\r\n      if (node) node.classList.add(\"node-wall\");\r\n    }\r\n  };\r\n\r\n  //TurnManagment\r\n\r\n  const checkMovement = (direction: string) => {\r\n    if (grid.length > 0 && actionsLeft > 0 && isMyTurn)\r\n      switch (direction) {\r\n        case \"up\":\r\n          if (!grid[playerX - 1][playerY].isWall) {\r\n            movePlayer(playerX - 1, playerY);\r\n          }\r\n\r\n          break;\r\n        case \"down\":\r\n          if (!grid[playerX + 1][playerY].isWall) {\r\n            movePlayer(playerX + 1, playerY);\r\n          }\r\n\r\n          break;\r\n\r\n        case \"right\":\r\n          if (!grid[playerX][playerY + 1].isWall) {\r\n            movePlayer(playerX, playerY + 1);\r\n          }\r\n\r\n          break;\r\n\r\n        case \"left\":\r\n          if (!grid[playerX][playerY - 1].isWall) {\r\n            movePlayer(playerX, playerY - 1);\r\n          }\r\n\r\n          break;\r\n      }\r\n  };\r\n  const movePlayer = (x: number, y: number, action: number = 1) => {\r\n    if (x < maxGridX && y < maxGridY && x >= 0 && y >= 0) {\r\n      const newGrid: Node[][] = grid.slice();\r\n      if (isPlayer1) {\r\n        newGrid[playerX][playerY].isPlayer1 = false;\r\n        newGrid[x][y].isPlayer1 = true;\r\n      } else {\r\n        newGrid[playerX][playerY].isPlayer2 = false;\r\n        newGrid[x][y].isPlayer2 = true;\r\n      }\r\n      console.log(newGrid[playerX][playerY]);\r\n\r\n      setPlayerX(x);\r\n      setPlayerY(y);\r\n      console.log(\"Moving...\");\r\n      setGrid(newGrid);\r\n      if (newGrid[x][y].isEndZone) {\r\n        alert(\"You've WON!\");\r\n        socket.emit(\"action-done\", newGrid, x, y);\r\n      } else {\r\n        handleEndTurn(x, y, checkBonus(x, y, actionsLeft - action));\r\n      }\r\n    }\r\n  };\r\n  const checkBonus = (x: number, y: number, actions: number) => {\r\n    if (grid[x][y].isBonus) {\r\n      setActionsLeft(actions + 2);\r\n      const newGrid: Node[][] = grid.slice();\r\n      newGrid[x][y].isBonus = false;\r\n      setGrid(newGrid);\r\n      return actions + 2;\r\n    } else {\r\n      setActionsLeft(actions);\r\n      return actions;\r\n    }\r\n  };\r\n  const handleTurn = () => {\r\n    resetTornadoAnimation();\r\n    setActionsLeft(3);\r\n    setIsMyTurn(true);\r\n  };\r\n  const handleEndTurn = (\r\n    x: number = playerX,\r\n    y: number = playerY,\r\n    actions: number\r\n  ) => {\r\n    socket.emit(\"action-done\", grid, x, y);\r\n    setTimeout(() => {\r\n      if (actions === 0) {\r\n        checkTornadoHit(x, y);\r\n\r\n        setIsMyTurn(false);\r\n        setNbTurns(nbTurns + 1);\r\n        socket.emit(\"turn-end\", nextNodeCoordinates);\r\n        console.log(\"Turn Ended\");\r\n\r\n        resetTornadoAnimation();\r\n      }\r\n    }, 500);\r\n  };\r\n\r\n  const checkTornadoHit = (x: number, y: number) => {\r\n    if (grid[x][y].isTornadoX || grid[x][y].isTornadoY) {\r\n      const newGrid: Node[][] = grid.slice();\r\n      if (isPlayer1) {\r\n        newGrid[x][y].isPlayer1 = false;\r\n        newGrid[player1X][player1Y].isPlayer1 = true;\r\n      } else {\r\n        newGrid[x][y].isPlayer2 = false;\r\n        newGrid[player2X][player2Y].isPlayer2 = true;\r\n      }\r\n      console.log(newGrid[playerX][playerY]);\r\n      setPlayerX(isPlayer1 ? player1X : player2X);\r\n      setPlayerY(isPlayer1 ? player1Y : player2Y);\r\n      console.log(\"Moving...\");\r\n      setGrid(newGrid);\r\n      socket.emit(\"action-done\", newGrid, x, y);\r\n    }\r\n  };\r\n\r\n  // Events handling\r\n  const handleMouseDown = (row: number, col: number) => {\r\n    setMouseIsPressed(true);\r\n    if (actionsLeft > 0 && isMyTurn) {\r\n      console.log(grid[row][col]);\r\n      toggleWall(row, col);\r\n      console.log(grid[row][col]);\r\n      //resetTornadoAnimation();\r\n    }\r\n  };\r\n\r\n  const generateNextTornado = () => {\r\n    const row = randomTornadoSpawnCoordinate(1, 22, true);\r\n    const col = randomTornadoSpawnCoordinate(1, 22, false);\r\n\r\n    console.log({ row, col });\r\n    if (row != -1 && col != -1) {\r\n      const newGrid: Node[][] = grid.slice();\r\n      console.log(\"------- Next Created -------\");\r\n\r\n      for (let i = 0; i < maxGridX; i++) {\r\n        if (!newGrid[i][col].isEndZone) newGrid[i][col].nextTornadoX = true;\r\n      }\r\n      for (let i = 0; i < maxGridY; i++) {\r\n        if (!newGrid[row][i].isEndZone) newGrid[row][i].nextTornadoY = true;\r\n      }\r\n      // var tornados: NodeCoordinates[] = tornadoList;\r\n      // tornados.push(nextNodeCoordinates);\r\n      // setTornadoList(tornados);\r\n      setNextTornadoCoordiantes({\r\n        row: row,\r\n        col: col,\r\n      });\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  const generateTornado = () => {\r\n    var tornados: NodeCoordinates[] = tornadoList.slice();\r\n    const varTornado = currentTornado;\r\n    if (varTornado) {\r\n      const newGrid: Node[][] = grid.slice();\r\n      const tornadoX = varTornado.row;\r\n      const tornadoY = varTornado.col;\r\n      console.log({ varTornado });\r\n      console.log(\"-------Tornado Created & Next Removed -------\");\r\n      for (let i = 0; i < maxGridX; i++) {\r\n        if (!newGrid[i][tornadoY].isEndZone) {\r\n          newGrid[i][tornadoY].nextTornadoX = false;\r\n          newGrid[i][tornadoY].isTornadoX = true;\r\n        }\r\n      }\r\n      for (let i = 0; i < maxGridY; i++) {\r\n        if (!newGrid[tornadoX][i].isEndZone) {\r\n          newGrid[tornadoX][i].nextTornadoY = false;\r\n          newGrid[tornadoX][i].isTornadoY = true;\r\n        }\r\n      }\r\n      // setTornadoList(tornados);\r\n      setGrid(newGrid);\r\n      // setCurrentTornado(varTornado);\r\n      setTornadoPlaced(true);\r\n    }\r\n  };\r\n  const clearTornado = () => {\r\n    var tornadosActive: NodeCoordinates[] = activeTornados.slice();\r\n    const varTornado = tornadosActive.shift();\r\n    if (varTornado && varTornado.row !== -1) {\r\n      const newGrid: Node[][] = grid.slice();\r\n      const tornadoX = varTornado.row;\r\n      const tornadoY = varTornado.col;\r\n\r\n      const nextTornado = currentTornado;\r\n      if ((nextTornado && nextTornado.col !== tornadoY) || !nextTornado)\r\n        for (let i = 0; i < maxGridX; i++) {\r\n          if (!newGrid[i][tornadoY].isEndZone) {\r\n            newGrid[i][tornadoY].isTornadoX = false;\r\n            newGrid[i][tornadoY].nextTornadoX = false;\r\n          }\r\n        }\r\n      if ((nextTornado && nextTornado.row !== tornadoX) || !nextTornado)\r\n        for (let i = 0; i < maxGridY; i++) {\r\n          if (!newGrid[tornadoX][i].isEndZone) {\r\n            newGrid[tornadoX][i].isTornadoY = false;\r\n            newGrid[tornadoX][i].nextTornadoY = false;\r\n          }\r\n        }\r\n      setGrid(newGrid);\r\n      setActiveTornados(tornadosActive);\r\n      console.log({ tornadosActive: tornadosActive });\r\n    }\r\n  };\r\n\r\n  const resetTornadoAnimation = () => {\r\n    var el = document.querySelectorAll(\".tornado-class-y\");\r\n    if (el) {\r\n      el.forEach((x) => {\r\n        if (x.classList.contains(\"tornado-y\")) {\r\n          x.classList.remove(\"tornado-y\");\r\n          void (x as HTMLElement).offsetWidth;\r\n          x.classList.add(\"tornado-y\");\r\n        } else if (x.classList.contains(\"next-tornado-y\")) {\r\n          x.classList.remove(\"next-tornado-y\");\r\n          void (x as HTMLElement).offsetWidth;\r\n          x.classList.add(\"next-tornado-y\");\r\n        }\r\n      });\r\n    }\r\n    var el = document.querySelectorAll(\".tornado-class-x\");\r\n    if (el) {\r\n      el.forEach((x) => {\r\n        if (x.classList.contains(\"tornado-x\")) {\r\n          x.classList.remove(\"tornado-x\");\r\n          void (x as HTMLElement).offsetWidth;\r\n          x.classList.add(\"tornado-x\");\r\n        } else if (x.classList.contains(\"next-tornado-x\")) {\r\n          x.classList.remove(\"next-tornado-x\");\r\n          void (x as HTMLElement).offsetWidth;\r\n          x.classList.add(\"next-tornado-x\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const generateBonus = () => {\r\n    var row, col;\r\n    do {\r\n      row = randomBonusSpawnCoordinate(1, 22);\r\n      col = randomBonusSpawnCoordinate(1, 22);\r\n    } while (\r\n      grid[row][col].isWall ||\r\n      grid[row][col].isPlayer1 ||\r\n      grid[row][col].isPlayer2 ||\r\n      grid[row][col].recentlyBuilt\r\n    );\r\n\r\n    if (row && col) {\r\n      const newGrid: Node[][] = grid.slice();\r\n      if (!newGrid[row][col].isEndZone && !newGrid[row][col].isEndZone)\r\n        newGrid[row][col].isBonus = true;\r\n\r\n      var bonuses: NodeCoordinates[] = activeBonus;\r\n      bonuses.push({ row: row, col: col });\r\n      setActiveBonus(bonuses);\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  const clearBonus = () => {\r\n    var activeBonusVar: NodeCoordinates[] = activeBonus.slice();\r\n    const bonus = activeBonusVar.shift();\r\n    if (bonus) {\r\n      const newGrid: Node[][] = grid.slice();\r\n      newGrid[bonus.row][bonus.col].isBonus = false;\r\n      setGrid(newGrid);\r\n      setActiveBonus(activeBonusVar);\r\n    }\r\n  };\r\n\r\n  // const handleMouseEnter = (row: number, col: number) => {\r\n  //   if (!mouseIsPressed) return;\r\n  //   const newGrid = toggleWall(grid, row, col);\r\n  //   setGrid(newGrid);\r\n  // };\r\n\r\n  const handleMouseUp = () => {\r\n    setMouseIsPressed(false);\r\n  };\r\n  return (\r\n    <>\r\n      <ActionBar\r\n        checkMovement={checkMovement}\r\n        actionsLeft={actionsLeft}\r\n        isPlayer1={isPlayer1}\r\n      />\r\n      <Card className=\"mt-2\">\r\n        <Card.Body>\r\n          <div className=\"d-flex justify-content-center\">\r\n            <table className=\"board\" id=\"board\">\r\n              <tbody>\r\n                {grid.map((row: Array<Node>, rowIdx) => {\r\n                  return (\r\n                    <tr key={rowIdx}>\r\n                      {row.map((node: Node, nodeIdx: number) => {\r\n                        return (\r\n                          <NodeComponent\r\n                            key={nodeIdx}\r\n                            col={node.col}\r\n                            row={node.row}\r\n                            isWall={node.isWall}\r\n                            isEndZone={node.isEndZone}\r\n                            isPlayer1={node.isPlayer1}\r\n                            isPlayer2={node.isPlayer2}\r\n                            recentlyBuilt={node.recentlyBuilt}\r\n                            tile={node.tile}\r\n                            isTornadoX={node.isTornadoX}\r\n                            isTornadoY={node.isTornadoY}\r\n                            nextTornadoX={node.nextTornadoX}\r\n                            nextTornadoY={node.nextTornadoY}\r\n                            isBonus={node.isBonus}\r\n                            mouseIsPressed={mouseIsPressed}\r\n                            onMouseDown={(row: number, col: number) =>\r\n                              handleMouseDown(row, col)\r\n                            }\r\n                            // onMouseEnter={(row: number, col: number) =>\r\n                            //   handleMouseEnter(row, col)\r\n                            // }\r\n                            onMouseUp={() => handleMouseUp()}\r\n                          ></NodeComponent>\r\n                        );\r\n                      })}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Achraff\\projects\\board-game\\src\\views\\Main.tsx",[],"C:\\Users\\Achraff\\projects\\board-game\\src\\components\\layouts\\Navbar.tsx",[],"C:\\Users\\Achraff\\projects\\board-game\\src\\components\\layouts\\Container.tsx",[],"C:\\Users\\Achraff\\projects\\board-game\\src\\routes.tsx",["79"],"import * as React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nimport GameView from \"./views/Game\";\r\nimport HomeView from \"./views/Home\";\r\n\r\n// If your app is big + you have routes with a lot of components, you should consider\r\n// code-splitting your routes! If you bundle stuff up with Webpack, I recommend `react-loadable`.\r\n//\r\n// $ yarn add react-loadable\r\n// $ yarn add --dev @types/react-loadable\r\n//\r\n// The given `pages/` directory provides an example of a directory structure that's easily\r\n// code-splittable.\r\nconst reload = () => window.location.reload();\r\n\r\nconst Routes: React.SFC = () => (\r\n  <Switch>\r\n    <Route exact path=\"/\" component={HomeView} />\r\n    <Route exact path=\"/play\" component={GameView} />\r\n    <Route exact path=\"/start\" component={HomeView} />\r\n    <Route path=\"/home/index.html\" onEnter={reload} />\r\n\r\n    <Route component={() => <div>Not Found</div>} />\r\n  </Switch>\r\n);\r\n\r\nexport default Routes;\r\n","C:\\Users\\Achraff\\projects\\board-game\\src\\components\\Grid\\ActionBar\\ActionBar.tsx",[],"C:\\Users\\Achraff\\projects\\board-game\\src\\components\\Grid\\Node\\Node.tsx",[],"C:\\Users\\Achraff\\projects\\board-game\\src\\views\\Home.tsx",["80","81","82"],"import React from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport PlayModeCard from \"../components/UI/PlayMode\";\r\n\r\nexport default function Main() {\r\n  const privateRoom = () => {};\r\n\r\n  const publicRoom = () => {};\r\n\r\n  return (\r\n    <div className=\"pt-4\">\r\n      <Row className=\"justify-content-center pt-4\">\r\n        <Col md={6} className=\"d-flex justify-content-center \">\r\n          <PlayModeCard\r\n            title=\"Private Room\"\r\n            description=\"Créer une chambre privée où vous inviter vos amis pour vous rejoindre\"\r\n            link=\"Go Now\"\r\n            image=\"/imgs/matching.svg\"\r\n          />\r\n        </Col>\r\n        <Col md={6} className=\"d-flex justify-content-center\">\r\n          <PlayModeCard\r\n            title=\"Public Room\"\r\n            description=\"Chercher autres joueurs à rejoindre\"\r\n            link=\"Go Now\"\r\n            image=\"/imgs/private.svg\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Achraff\\projects\\board-game\\src\\components\\UI\\PlayMode.tsx",[],"C:\\Users\\Achraff\\projects\\board-game\\src\\components\\ballAnimation.js",["83"],"export function animateBall(ballNb) {\r\n  const colors = [\"#3CC157\", \"#2AA7FF\", \"#1B1B1B\", \"#FCBC0F\", \"#F85F36\"];\r\n\r\n  const numBalls = ballNb;\r\n  const balls = [];\r\n\r\n  for (let i = 0; i < numBalls; i++) {\r\n    let ball = document.createElement(\"div\");\r\n    ball.classList.add(\"ball\");\r\n    ball.style.background = colors[Math.floor(Math.random() * colors.length)];\r\n    ball.style.left = `${Math.floor(Math.random() * 85)}vw`;\r\n    ball.style.top = `${Math.floor(Math.random() * 85)}vh`;\r\n    ball.style.transform = `scale(${Math.random()})`;\r\n    ball.style.width = `${Math.random()}em`;\r\n    ball.style.height = ball.style.width;\r\n\r\n    balls.push(ball);\r\n    document.body.append(ball);\r\n  }\r\n\r\n  // Keyframes\r\n  balls.forEach((el, i, ra) => {\r\n    let to = {\r\n      x: Math.random() * (i % 2 === 0 ? -11 : 11),\r\n      y: Math.random() * 12,\r\n    };\r\n\r\n    let anim = el.animate(\r\n      [\r\n        { transform: \"translate(0, 0)\" },\r\n        { transform: `translate(${to.x}rem, ${to.y}rem)` },\r\n      ],\r\n      {\r\n        duration: (Math.random() + 1) * 2000, // random duration\r\n        direction: \"alternate\",\r\n        fill: \"both\",\r\n        iterations: Infinity,\r\n        easing: \"ease-in-out\",\r\n      }\r\n    );\r\n  });\r\n}\r\n",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":31,"column":18,"nodeType":"90","messageId":"91","endLine":31,"endColumn":27},{"ruleId":"88","severity":1,"message":"92","line":58,"column":10,"nodeType":"90","messageId":"91","endLine":58,"endColumn":26},{"ruleId":"88","severity":1,"message":"93","line":58,"column":28,"nodeType":"90","messageId":"91","endLine":58,"endColumn":47},{"ruleId":"94","severity":1,"message":"95","line":149,"column":6,"nodeType":"96","endLine":149,"endColumn":8,"suggestions":"97"},{"ruleId":"98","severity":1,"message":"99","line":299,"column":23,"nodeType":"100","messageId":"101","endLine":299,"endColumn":25},{"ruleId":"98","severity":1,"message":"99","line":299,"column":39,"nodeType":"100","messageId":"101","endLine":299,"endColumn":41},{"ruleId":"98","severity":1,"message":"99","line":301,"column":23,"nodeType":"100","messageId":"101","endLine":301,"endColumn":25},{"ruleId":"94","severity":1,"message":"102","line":309,"column":6,"nodeType":"96","endLine":309,"endColumn":16,"suggestions":"103"},{"ruleId":"94","severity":1,"message":"104","line":318,"column":6,"nodeType":"96","endLine":318,"endColumn":21,"suggestions":"105"},{"ruleId":"94","severity":1,"message":"106","line":338,"column":6,"nodeType":"96","endLine":338,"endColumn":21,"suggestions":"107"},{"ruleId":"98","severity":1,"message":"108","line":503,"column":13,"nodeType":"100","messageId":"101","endLine":503,"endColumn":15},{"ruleId":"98","severity":1,"message":"108","line":503,"column":26,"nodeType":"100","messageId":"101","endLine":503,"endColumn":28},{"ruleId":"88","severity":1,"message":"109","line":525,"column":9,"nodeType":"90","messageId":"91","endLine":525,"endColumn":36},{"ruleId":"110","severity":1,"message":"111","line":595,"column":9,"nodeType":"90","messageId":"112","endLine":595,"endColumn":11},{"ruleId":"88","severity":1,"message":"113","line":2,"column":25,"nodeType":"90","messageId":"91","endLine":2,"endColumn":33},{"ruleId":"88","severity":1,"message":"114","line":4,"column":8,"nodeType":"90","messageId":"91","endLine":4,"endColumn":12},{"ruleId":"88","severity":1,"message":"115","line":8,"column":9,"nodeType":"90","messageId":"91","endLine":8,"endColumn":20},{"ruleId":"88","severity":1,"message":"116","line":10,"column":9,"nodeType":"90","messageId":"91","endLine":10,"endColumn":19},{"ruleId":"117","severity":1,"message":"118","line":28,"column":9,"nodeType":"90","messageId":"91","endLine":28,"endColumn":13},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"@typescript-eslint/no-unused-vars","'setSocket' is assigned a value but never used.","Identifier","unusedVar","'bonusCoordinates' is assigned a value but never used.","'setBonusCoordinates' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gameStarted', 'generateMaze', 'getInitialGrid', 'handleTurn', 'isPlayer1', 'nbPlayer', and 'socket'. Either include them or remove the dependency array. You can also do a functional update 'setNbPlayer(n => ...)' if you only need 'nbPlayer' in the 'setNbPlayer' call.","ArrayExpression",["121"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'clearBonus', 'clearRecentlyBuiltWalls', 'clearTornado', 'currentTornado', 'generateBonus', 'generateNextTornado', 'generateTornado', 'grid', 'nbTurns', 'playerX', 'playerY', 'socket', and 'tornadoList'. Either include them or remove the dependency array.",["122"],"React Hook useEffect has missing dependencies: 'activeTornados' and 'currentTornado'. Either include them or remove the dependency array.",["123"],"React Hook useEffect has missing dependencies: 'handleTurn' and 'isPlayer1'. Either include them or remove the dependency array.",["124"],"Expected '!==' and instead saw '!='.","'tornados' is assigned a value but never used.","@typescript-eslint/no-redeclare","'el' is already defined.","redeclared","'Redirect' is defined but never used.","'Card' is defined but never used.","'privateRoom' is assigned a value but never used.","'publicRoom' is assigned a value but never used.","no-unused-vars","'anim' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},"Update the dependencies array to be: [gameStarted, generateMaze, getInitialGrid, handleTurn, isPlayer1, nbPlayer, socket]",{"range":"133","text":"134"},"Update the dependencies array to be: [clearBonus, clearRecentlyBuiltWalls, clearTornado, currentTornado, generateBonus, generateNextTornado, generateTornado, grid, isMyTurn, nbTurns, playerX, playerY, socket, tornadoList]",{"range":"135","text":"136"},"Update the dependencies array to be: [activeTornados, currentTornado, tornadoPlaced]",{"range":"137","text":"138"},"Update the dependencies array to be: [gridGenerated, handleTurn, isPlayer1]",{"range":"139","text":"140"},[4432,4434],"[gameStarted, generateMaze, getInitialGrid, handleTurn, isPlayer1, nbPlayer, socket]",[9520,9530],"[clearBonus, clearRecentlyBuiltWalls, clearTornado, currentTornado, generateBonus, generateNextTornado, generateTornado, grid, isMyTurn, nbTurns, playerX, playerY, socket, tornadoList]",[9792,9807],"[activeTornados, currentTornado, tornadoPlaced]",[10286,10301],"[gridGenerated, handleTurn, isPlayer1]"]